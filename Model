# -------- libraries --------
\from keras.models import Sequential
from keras.layers import Dense
from keras.preprocessing import sequence
import numpy as np  
import pandas as pd
import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
nltk.download('wordnet')
from nltk.stem import WordNetLemmatizer
from sklearn.metrics import confusion_matrix, accuracy_score, auc

# -------- load -------- 
df = pd.read_csv("load.csv")

# -------- fill blanks -------- 
df = df.fillna("blank")

# -------- define x / y -------- 
X = df["Terms"]
y = df["Chargeback"]

# -------- clean / lemmatize -------- 
documents = []
stemmer = WordNetLemmatizer()
for sen in range(0, len(X)):
    document = re.sub(r'\W', ' ', str(X[sen]))
    document = document.lower()
    document = document.split()
    document = [stemmer.lemmatize(word) for word in document]
    document = ' '.join(document)
    documents.append(document)

# -------- vectorize -------- 
from sklearn.feature_extraction.text import TfidfVectorizer  
tfidfconverter = TfidfVectorizer(
    max_features=2000,
    min_df=10,
    max_df=0.7,
    stop_words=stopwords.words('english'))  
X = tfidfconverter.fit_transform(documents).toarray()  

# -------- partition -------- 
from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=1)  


# -------- stack --------
def model():
    model = Sequential()
    model.add(Dense(2000, input_dim = 2000, activation = 'relu'))
    model.add(Dense(1000, activation = 'relu'))
    model.add(Dense(500, activation = 'relu'))
    model.add(Dense(1, activation = 'sigmoid'))
    model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
    return model

# -------- call model -------- 
model = model()

# -------- fit  -------- 
model.fit(X_train,y_train, epochs = 10, batch_size = 512, verbose = True)

# -------- predict  -------- 
pred = model.predict_classes(X_test)

# -------- Confusion Matrix -------- 
matrix = pd.DataFrame(confusion_matrix(y_test,pred, labels = [x for x in range(0,2)]))
matrix

# -------- accuracy -------- 
accuracy_score(y_test,pred)

# -------- summary -------- 
model.summary()
